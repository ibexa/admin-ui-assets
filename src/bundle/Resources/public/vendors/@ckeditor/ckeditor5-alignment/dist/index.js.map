{"version":3,"sources":["index.js","../src/utils.ts","../src/alignmentcommand.ts","../src/alignmentediting.ts","../src/alignmentui.ts","../src/alignment.ts"],"names":["supportedOptions","isSupported","option","includes","isDefault","alignment","locale","contentLanguageDirection","normalizeAlignmentOptions","configuredOptions","normalizedOptions","map","result","name","filter","isNameValid","logWarning","classNameCount","Boolean","className","length","CKEditorError","forEach","index","allOptions","succeedingOptions","slice","nameAlreadyExists","some","item","classNameAlreadyExists","ALIGNMENT","AlignmentCommand","Command","editor","firstBlock","first","model","document","selection","getSelectedBlocks","isEnabled","_canBeAligned","hasAttribute","value","getAttribute","execute","options","doc","change","writer","blocks","Array","from","block","currentAlignment","removeAlignment","removeAlignmentFromSelection","setAlignmentOnSelection","schema","checkAttribute","removeAttribute","setAttribute","AlignmentEditing","Plugin","pluginName","isOfficialPlugin","constructor","config","define","get","optionsToConvert","shouldUseClasses","extend","allowAttributes","setAttributeProperties","isFormatting","conversion","attributeToAttribute","buildClassDefinition","for","buildDowncastInlineDefinition","upcastInlineDefinitions","buildUpcastInlineDefinitions","definition","upcastCompatibilityDefinitions","buildUpcastCompatibilityDefinitions","commands","add","view","key","values","definitions","push","iconsMap","Map","IconAlignLeft","IconAlignRight","IconAlignCenter","IconAlignJustify","AlignmentUI","localizedOptionTitles","t","_addButton","_addToolbarDropdown","_addMenuBarMenu","ui","componentFactory","_createButton","buttonAttrs","command","buttonView","ButtonView","set","label","icon","tooltip","isToggleable","bind","to","listenTo","editing","focus","factory","dropdownView","createDropdown","tooltipPosition","uiLanguageDirection","addToolbarToDropdown","enableActiveItemFocusOnDropdownOpen","isVertical","ariaLabel","extendTemplate","attributes","class","defaultIcon","menuView","MenuBarMenuView","listView","MenuBarMenuListView","role","listItemView","MenuBarMenuListItemView","MenuBarMenuListItemButtonView","delegate","on","children","items","panelView","Alignment","requires"],"mappings":"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","file":"index.js.map","sourcesContent":["import { Command, Plugin } from '@ckeditor/ckeditor5-core/dist/index.js';\nimport { logWarning, CKEditorError, first } from '@ckeditor/ckeditor5-utils/dist/index.js';\nimport { ButtonView, createDropdown, addToolbarToDropdown, MenuBarMenuView, MenuBarMenuListView, MenuBarMenuListItemView, MenuBarMenuListItemButtonView } from '@ckeditor/ckeditor5-ui/dist/index.js';\nimport { IconAlignLeft, IconAlignRight, IconAlignCenter, IconAlignJustify } from '@ckeditor/ckeditor5-icons/dist/index.js';\n\n/**\n * @module alignment/utils\n */ /**\n * The list of supported alignment options:\n *\n * * `'left'`,\n * * `'right'`,\n * * `'center'`,\n * * `'justify'`\n */ const supportedOptions = [\n    'left',\n    'right',\n    'center',\n    'justify'\n];\n/**\n * Checks whether the passed option is supported by {@link module:alignment/alignmentediting~AlignmentEditing}.\n *\n * @param option The option value to check.\n */ function isSupported(option) {\n    return supportedOptions.includes(option);\n}\n/**\n * Checks whether alignment is the default one considering the direction\n * of the editor content.\n *\n * @param alignment The name of the alignment to check.\n * @param locale The {@link module:core/editor/editor~Editor#locale} instance.\n */ function isDefault(alignment, locale) {\n    // Right now only LTR is supported so the 'left' value is always the default one.\n    if (locale.contentLanguageDirection == 'rtl') {\n        return alignment === 'right';\n    } else {\n        return alignment === 'left';\n    }\n}\n/**\n * Brings the configuration to the common form, an array of objects.\n *\n * @param configuredOptions Alignment plugin configuration.\n * @returns Normalized object holding the configuration.\n */ function normalizeAlignmentOptions(configuredOptions) {\n    const normalizedOptions = configuredOptions.map((option)=>{\n        let result;\n        if (typeof option == 'string') {\n            result = {\n                name: option\n            };\n        } else {\n            result = option;\n        }\n        return result;\n    })// Remove all unknown options.\n    .filter((option)=>{\n        const isNameValid = supportedOptions.includes(option.name);\n        if (!isNameValid) {\n            /**\n\t\t\t\t * The `name` in one of the `alignment.options` is not recognized.\n\t\t\t\t * The available options are: `'left'`, `'right'`, `'center'` and `'justify'`.\n\t\t\t\t *\n\t\t\t\t * @error alignment-config-name-not-recognized\n\t\t\t\t * @param {object} option Options with unknown value of the `name` property.\n\t\t\t\t */ logWarning('alignment-config-name-not-recognized', {\n                option\n            });\n        }\n        return isNameValid;\n    });\n    const classNameCount = normalizedOptions.filter((option)=>Boolean(option.className)).length;\n    // We either use classes for all styling options or for none.\n    if (classNameCount && classNameCount < normalizedOptions.length) {\n        /**\n\t\t * The `className` property has to be defined for all options once at least one option declares `className`.\n\t\t *\n\t\t * @error alignment-config-classnames-are-missing\n\t\t * @param {object} configuredOptions Contents of `alignment.options`.\n\t\t */ throw new CKEditorError('alignment-config-classnames-are-missing', {\n            configuredOptions\n        });\n    }\n    // Validate resulting config.\n    normalizedOptions.forEach((option, index, allOptions)=>{\n        const succeedingOptions = allOptions.slice(index + 1);\n        const nameAlreadyExists = succeedingOptions.some((item)=>item.name == option.name);\n        if (nameAlreadyExists) {\n            /**\n\t\t\t * The same `name` in one of the `alignment.options` was already declared.\n\t\t\t * Each `name` representing one alignment option can be set exactly once.\n\t\t\t *\n\t\t\t * @error alignment-config-name-already-defined\n\t\t\t * @param {object} option First option that declares given `name`.\n\t\t\t * @param {object} configuredOptions Contents of `alignment.options`.\n\t\t\t */ throw new CKEditorError('alignment-config-name-already-defined', {\n                option,\n                configuredOptions\n            });\n        }\n        // The `className` property is present. Check for duplicates then.\n        if (option.className) {\n            const classNameAlreadyExists = succeedingOptions.some((item)=>item.className == option.className);\n            if (classNameAlreadyExists) {\n                /**\n\t\t\t\t * The same `className` in one of the `alignment.options` was already declared.\n\t\t\t\t *\n\t\t\t\t * @error alignment-config-classname-already-defined\n\t\t\t\t * @param {object} option First option that declares given `className`.\n\t\t\t\t * @param {object} configuredOptions\n\t\t\t\t * Contents of `alignment.options`.\n\t\t\t\t */ throw new CKEditorError('alignment-config-classname-already-defined', {\n                    option,\n                    configuredOptions\n                });\n            }\n        }\n    });\n    return normalizedOptions;\n}\n\nconst ALIGNMENT = 'alignment';\n/**\n * The alignment command plugin.\n */ class AlignmentCommand extends Command {\n    /**\n\t * @inheritDoc\n\t */ refresh() {\n        const editor = this.editor;\n        const locale = editor.locale;\n        const firstBlock = first(this.editor.model.document.selection.getSelectedBlocks());\n        // As first check whether to enable or disable the command as the value will always be false if the command cannot be enabled.\n        this.isEnabled = Boolean(firstBlock) && this._canBeAligned(firstBlock);\n        if (this.isEnabled && firstBlock.hasAttribute('alignment')) {\n            this.value = firstBlock.getAttribute('alignment');\n        } else {\n            this.value = locale.contentLanguageDirection === 'rtl' ? 'right' : 'left';\n        }\n    }\n    /**\n\t * Executes the command. Applies the alignment `value` to the selected blocks.\n\t * If no `value` is passed, the `value` is the default one or it is equal to the currently selected block's alignment attribute,\n\t * the command will remove the attribute from the selected blocks.\n\t *\n\t * @param options Options for the executed command.\n\t * @param options.value The value to apply.\n\t * @fires execute\n\t */ execute(options = {}) {\n        const editor = this.editor;\n        const locale = editor.locale;\n        const model = editor.model;\n        const doc = model.document;\n        const value = options.value;\n        model.change((writer)=>{\n            // Get only those blocks from selected that can have alignment set\n            const blocks = Array.from(doc.selection.getSelectedBlocks()).filter((block)=>this._canBeAligned(block));\n            const currentAlignment = blocks[0].getAttribute('alignment');\n            // Remove alignment attribute if current alignment is:\n            // - default (should not be stored in model as it will bloat model data)\n            // - equal to currently set\n            // - or no value is passed - denotes default alignment.\n            const removeAlignment = isDefault(value, locale) || currentAlignment === value || !value;\n            if (removeAlignment) {\n                removeAlignmentFromSelection(blocks, writer);\n            } else {\n                setAlignmentOnSelection(blocks, writer, value);\n            }\n        });\n    }\n    /**\n\t * Checks whether a block can have alignment set.\n\t *\n\t * @param block The block to be checked.\n\t */ _canBeAligned(block) {\n        return this.editor.model.schema.checkAttribute(block, ALIGNMENT);\n    }\n}\n/**\n * Removes the alignment attribute from blocks.\n */ function removeAlignmentFromSelection(blocks, writer) {\n    for (const block of blocks){\n        writer.removeAttribute(ALIGNMENT, block);\n    }\n}\n/**\n * Sets the alignment attribute on blocks.\n */ function setAlignmentOnSelection(blocks, writer, alignment) {\n    for (const block of blocks){\n        writer.setAttribute(ALIGNMENT, alignment, block);\n    }\n}\n\n/**\n * The alignment editing feature. It introduces the {@link module:alignment/alignmentcommand~AlignmentCommand command} and adds\n * the `alignment` attribute for block elements in the {@link module:engine/model/model~Model model}.\n */ class AlignmentEditing extends Plugin {\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'AlignmentEditing';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isOfficialPlugin() {\n        return true;\n    }\n    /**\n\t * @inheritDoc\n\t */ constructor(editor){\n        super(editor);\n        editor.config.define('alignment', {\n            options: supportedOptions.map((option)=>({\n                    name: option\n                }))\n        });\n    }\n    /**\n\t * @inheritDoc\n\t */ init() {\n        const editor = this.editor;\n        const locale = editor.locale;\n        const schema = editor.model.schema;\n        const options = normalizeAlignmentOptions(editor.config.get('alignment.options'));\n        // Filter out unsupported options and those that are redundant, e.g. `left` in LTR / `right` in RTL mode.\n        const optionsToConvert = options.filter((option)=>isSupported(option.name) && !isDefault(option.name, locale));\n        // Once there is at least one `className` defined, we switch to alignment with classes.\n        const shouldUseClasses = optionsToConvert.some((option)=>!!option.className);\n        // Allow alignment attribute on all blocks.\n        schema.extend('$block', {\n            allowAttributes: 'alignment'\n        });\n        editor.model.schema.setAttributeProperties('alignment', {\n            isFormatting: true\n        });\n        if (shouldUseClasses) {\n            editor.conversion.attributeToAttribute(buildClassDefinition(optionsToConvert));\n        } else {\n            // Downcast inline styles.\n            editor.conversion.for('downcast').attributeToAttribute(buildDowncastInlineDefinition(optionsToConvert));\n        }\n        const upcastInlineDefinitions = buildUpcastInlineDefinitions(optionsToConvert);\n        // Always upcast from inline styles.\n        for (const definition of upcastInlineDefinitions){\n            editor.conversion.for('upcast').attributeToAttribute(definition);\n        }\n        const upcastCompatibilityDefinitions = buildUpcastCompatibilityDefinitions(optionsToConvert);\n        // Always upcast from deprecated `align` attribute.\n        for (const definition of upcastCompatibilityDefinitions){\n            editor.conversion.for('upcast').attributeToAttribute(definition);\n        }\n        editor.commands.add('alignment', new AlignmentCommand(editor));\n    }\n}\n/**\n * Prepare downcast conversion definition for inline alignment styling.\n */ function buildDowncastInlineDefinition(options) {\n    const view = {};\n    for (const { name } of options){\n        view[name] = {\n            key: 'style',\n            value: {\n                'text-align': name\n            }\n        };\n    }\n    const definition = {\n        model: {\n            key: 'alignment',\n            values: options.map((option)=>option.name)\n        },\n        view\n    };\n    return definition;\n}\n/**\n * Prepare upcast definitions for inline alignment styles.\n */ function buildUpcastInlineDefinitions(options) {\n    const definitions = [];\n    for (const { name } of options){\n        definitions.push({\n            view: {\n                key: 'style',\n                value: {\n                    'text-align': name\n                }\n            },\n            model: {\n                key: 'alignment',\n                value: name\n            }\n        });\n    }\n    return definitions;\n}\n/**\n * Prepare upcast definitions for deprecated `align` attribute.\n */ function buildUpcastCompatibilityDefinitions(options) {\n    const definitions = [];\n    for (const { name } of options){\n        definitions.push({\n            view: {\n                key: 'align',\n                value: name\n            },\n            model: {\n                key: 'alignment',\n                value: name\n            }\n        });\n    }\n    return definitions;\n}\n/**\n * Prepare conversion definitions for upcast and downcast alignment with classes.\n */ function buildClassDefinition(options) {\n    const view = {};\n    for (const option of options){\n        view[option.name] = {\n            key: 'class',\n            value: option.className\n        };\n    }\n    const definition = {\n        model: {\n            key: 'alignment',\n            values: options.map((option)=>option.name)\n        },\n        view\n    };\n    return definition;\n}\n\nconst iconsMap = /* #__PURE__ */ (()=>new Map([\n        [\n            'left',\n            IconAlignLeft\n        ],\n        [\n            'right',\n            IconAlignRight\n        ],\n        [\n            'center',\n            IconAlignCenter\n        ],\n        [\n            'justify',\n            IconAlignJustify\n        ]\n    ]))();\n/**\n * The default alignment UI plugin.\n *\n * It introduces the `'alignment:left'`, `'alignment:right'`, `'alignment:center'` and `'alignment:justify'` buttons\n * and the `'alignment'` dropdown.\n */ class AlignmentUI extends Plugin {\n    /**\n\t * Returns the localized option titles provided by the plugin.\n\t *\n\t * The following localized titles corresponding with\n\t * {@link module:alignment/alignmentconfig~AlignmentConfig#options} are available:\n\t *\n\t * * `'left'`,\n\t * * `'right'`,\n\t * * `'center'`,\n\t * * `'justify'`.\n\t *\n\t * @readonly\n\t */ get localizedOptionTitles() {\n        const t = this.editor.t;\n        return {\n            'left': t('Align left'),\n            'right': t('Align right'),\n            'center': t('Align center'),\n            'justify': t('Justify')\n        };\n    }\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'AlignmentUI';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isOfficialPlugin() {\n        return true;\n    }\n    /**\n\t * @inheritDoc\n\t */ init() {\n        const editor = this.editor;\n        const options = normalizeAlignmentOptions(editor.config.get('alignment.options'));\n        options.map((option)=>option.name).filter(isSupported).forEach((option)=>this._addButton(option));\n        this._addToolbarDropdown(options);\n        this._addMenuBarMenu(options);\n    }\n    /**\n\t * Helper method for initializing the button and linking it with an appropriate command.\n\t *\n\t * @param option The name of the alignment option for which the button is added.\n\t */ _addButton(option) {\n        const editor = this.editor;\n        editor.ui.componentFactory.add(`alignment:${option}`, (locale)=>this._createButton(locale, option));\n    }\n    /**\n\t * Helper method for creating the button view element.\n\t *\n\t * @param locale Editor locale.\n\t * @param option The name of the alignment option for which the button is added.\n\t * @param buttonAttrs Optional parameters passed to button view instance.\n\t */ _createButton(locale, option, buttonAttrs = {}) {\n        const editor = this.editor;\n        const command = editor.commands.get('alignment');\n        const buttonView = new ButtonView(locale);\n        buttonView.set({\n            label: this.localizedOptionTitles[option],\n            icon: iconsMap.get(option),\n            tooltip: true,\n            isToggleable: true,\n            ...buttonAttrs\n        });\n        // Bind button model to command.\n        buttonView.bind('isEnabled').to(command);\n        buttonView.bind('isOn').to(command, 'value', (value)=>value === option);\n        // Execute command.\n        this.listenTo(buttonView, 'execute', ()=>{\n            editor.execute('alignment', {\n                value: option\n            });\n            editor.editing.view.focus();\n        });\n        return buttonView;\n    }\n    /**\n\t * Helper method for initializing the toolnar dropdown and linking it with an appropriate command.\n\t *\n\t * @param options The name of the alignment option for which the button is added.\n\t */ _addToolbarDropdown(options) {\n        const editor = this.editor;\n        const factory = editor.ui.componentFactory;\n        factory.add('alignment', (locale)=>{\n            const dropdownView = createDropdown(locale);\n            const tooltipPosition = locale.uiLanguageDirection === 'rtl' ? 'w' : 'e';\n            const t = locale.t;\n            // Add existing alignment buttons to dropdown's toolbar.\n            addToolbarToDropdown(dropdownView, ()=>options.map((option)=>this._createButton(locale, option.name, {\n                        tooltipPosition\n                    })), {\n                enableActiveItemFocusOnDropdownOpen: true,\n                isVertical: true,\n                ariaLabel: t('Text alignment toolbar')\n            });\n            // Configure dropdown properties an behavior.\n            dropdownView.buttonView.set({\n                label: t('Text alignment'),\n                tooltip: true\n            });\n            dropdownView.extendTemplate({\n                attributes: {\n                    class: 'ck-alignment-dropdown'\n                }\n            });\n            // The default icon depends on the direction of the content.\n            const defaultIcon = locale.contentLanguageDirection === 'rtl' ? iconsMap.get('right') : iconsMap.get('left');\n            const command = editor.commands.get('alignment');\n            // Change icon to reflect current selection's alignment.\n            dropdownView.buttonView.bind('icon').to(command, 'value', (value)=>iconsMap.get(value) || defaultIcon);\n            // Enable button if any of the buttons is enabled.\n            dropdownView.bind('isEnabled').to(command, 'isEnabled');\n            // Focus the editable after executing the command.\n            // Overrides a default behaviour where the focus is moved to the dropdown button (#12125).\n            this.listenTo(dropdownView, 'execute', ()=>{\n                editor.editing.view.focus();\n            });\n            return dropdownView;\n        });\n    }\n    /**\n\t * Creates a menu for all alignment options to use either in menu bar.\n\t *\n\t * @param options Normalized alignment options from config.\n\t */ _addMenuBarMenu(options) {\n        const editor = this.editor;\n        editor.ui.componentFactory.add('menuBar:alignment', (locale)=>{\n            const command = editor.commands.get('alignment');\n            const t = locale.t;\n            const menuView = new MenuBarMenuView(locale);\n            const listView = new MenuBarMenuListView(locale);\n            menuView.bind('isEnabled').to(command);\n            listView.set({\n                ariaLabel: t('Text alignment'),\n                role: 'menu'\n            });\n            menuView.buttonView.set({\n                label: t('Text alignment')\n            });\n            for (const option of options){\n                const listItemView = new MenuBarMenuListItemView(locale, menuView);\n                const buttonView = new MenuBarMenuListItemButtonView(locale);\n                buttonView.delegate('execute').to(menuView);\n                buttonView.set({\n                    label: this.localizedOptionTitles[option.name],\n                    icon: iconsMap.get(option.name),\n                    role: 'menuitemcheckbox',\n                    isToggleable: true\n                });\n                buttonView.on('execute', ()=>{\n                    editor.execute('alignment', {\n                        value: option.name\n                    });\n                    editor.editing.view.focus();\n                });\n                buttonView.bind('isOn').to(command, 'value', (value)=>value === option.name);\n                buttonView.bind('isEnabled').to(command, 'isEnabled');\n                listItemView.children.add(buttonView);\n                listView.items.add(listItemView);\n            }\n            menuView.panelView.children.add(listView);\n            return menuView;\n        });\n    }\n}\n\n/**\n * The text alignment plugin.\n *\n * For a detailed overview, check the {@glink features/text-alignment Text alignment} feature guide\n * and the {@glink api/alignment package page}.\n *\n * This is a \"glue\" plugin which loads the {@link module:alignment/alignmentediting~AlignmentEditing} and\n * {@link module:alignment/alignmentui~AlignmentUI} plugins.\n */ class Alignment extends Plugin {\n    /**\n\t * @inheritDoc\n\t */ static get requires() {\n        return [\n            AlignmentEditing,\n            AlignmentUI\n        ];\n    }\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'Alignment';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isOfficialPlugin() {\n        return true;\n    }\n}\n\nexport { Alignment, AlignmentEditing, AlignmentUI };\n//# sourceMappingURL=index.js.map\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\nimport { CKEditorError, logWarning, type Locale } from 'ckeditor5/src/utils.js';\nimport type { AlignmentFormat, SupportedOption } from './alignmentconfig.js';\n\n/**\n * @module alignment/utils\n */\n\n/**\n * The list of supported alignment options:\n *\n * * `'left'`,\n * * `'right'`,\n * * `'center'`,\n * * `'justify'`\n */\nexport const supportedOptions: ReadonlyArray<SupportedOption> = [ 'left', 'right', 'center', 'justify' ];\n\n/**\n * Checks whether the passed option is supported by {@link module:alignment/alignmentediting~AlignmentEditing}.\n *\n * @param option The option value to check.\n */\nexport function isSupported( option: string ): boolean {\n\treturn ( supportedOptions as Array<string> ).includes( option );\n}\n\n/**\n * Checks whether alignment is the default one considering the direction\n * of the editor content.\n *\n * @param alignment The name of the alignment to check.\n * @param locale The {@link module:core/editor/editor~Editor#locale} instance.\n */\nexport function isDefault( alignment: string, locale: Locale ): boolean {\n\t// Right now only LTR is supported so the 'left' value is always the default one.\n\n\tif ( locale.contentLanguageDirection == 'rtl' ) {\n\t\treturn alignment === 'right';\n\t} else {\n\t\treturn alignment === 'left';\n\t}\n}\n\n/**\n * Brings the configuration to the common form, an array of objects.\n *\n * @param configuredOptions Alignment plugin configuration.\n * @returns Normalized object holding the configuration.\n */\nexport function normalizeAlignmentOptions( configuredOptions: Array<string | AlignmentFormat> ): Array<AlignmentFormat> {\n\tconst normalizedOptions = configuredOptions\n\t\t.map( option => {\n\t\t\tlet result;\n\n\t\t\tif ( typeof option == 'string' ) {\n\t\t\t\tresult = { name: option };\n\t\t\t} else {\n\t\t\t\tresult = option;\n\t\t\t}\n\n\t\t\treturn result as AlignmentFormat;\n\t\t} )\n\t\t// Remove all unknown options.\n\t\t.filter( option => {\n\t\t\tconst isNameValid = supportedOptions.includes( option.name );\n\n\t\t\tif ( !isNameValid ) {\n\t\t\t\t/**\n\t\t\t\t * The `name` in one of the `alignment.options` is not recognized.\n\t\t\t\t * The available options are: `'left'`, `'right'`, `'center'` and `'justify'`.\n\t\t\t\t *\n\t\t\t\t * @error alignment-config-name-not-recognized\n\t\t\t\t * @param {object} option Options with unknown value of the `name` property.\n\t\t\t\t */\n\t\t\t\tlogWarning( 'alignment-config-name-not-recognized', { option } );\n\t\t\t}\n\n\t\t\treturn isNameValid;\n\t\t} );\n\n\tconst classNameCount = normalizedOptions.filter( option => Boolean( option.className ) ).length;\n\n\t// We either use classes for all styling options or for none.\n\tif ( classNameCount && classNameCount < normalizedOptions.length ) {\n\t\t/**\n\t\t * The `className` property has to be defined for all options once at least one option declares `className`.\n\t\t *\n\t\t * @error alignment-config-classnames-are-missing\n\t\t * @param {object} configuredOptions Contents of `alignment.options`.\n\t\t */\n\t\tthrow new CKEditorError( 'alignment-config-classnames-are-missing', { configuredOptions } );\n\t}\n\n\t// Validate resulting config.\n\tnormalizedOptions.forEach( ( option, index, allOptions ) => {\n\t\tconst succeedingOptions = allOptions.slice( index + 1 );\n\t\tconst nameAlreadyExists = succeedingOptions.some( item => item.name == option.name );\n\n\t\tif ( nameAlreadyExists ) {\n\t\t\t/**\n\t\t\t * The same `name` in one of the `alignment.options` was already declared.\n\t\t\t * Each `name` representing one alignment option can be set exactly once.\n\t\t\t *\n\t\t\t * @error alignment-config-name-already-defined\n\t\t\t * @param {object} option First option that declares given `name`.\n\t\t\t * @param {object} configuredOptions Contents of `alignment.options`.\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'alignment-config-name-already-defined', { option, configuredOptions } );\n\t\t}\n\n\t\t// The `className` property is present. Check for duplicates then.\n\t\tif ( option.className ) {\n\t\t\tconst classNameAlreadyExists = succeedingOptions.some( item => item.className == option.className );\n\n\t\t\tif ( classNameAlreadyExists ) {\n\t\t\t\t/**\n\t\t\t\t * The same `className` in one of the `alignment.options` was already declared.\n\t\t\t\t *\n\t\t\t\t * @error alignment-config-classname-already-defined\n\t\t\t\t * @param {object} option First option that declares given `className`.\n\t\t\t\t * @param {object} configuredOptions\n\t\t\t\t * Contents of `alignment.options`.\n\t\t\t\t */\n\t\t\t\tthrow new CKEditorError( 'alignment-config-classname-already-defined', { option, configuredOptions } );\n\t\t\t}\n\t\t}\n\t} );\n\n\treturn normalizedOptions;\n}\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module alignment/alignmentcommand\n */\n\nimport { Command } from 'ckeditor5/src/core.js';\nimport { first } from 'ckeditor5/src/utils.js';\nimport type { Element, Writer } from 'ckeditor5/src/engine.js';\n\nimport { isDefault } from './utils.js';\nimport type { SupportedOption } from './alignmentconfig.js';\n\nconst ALIGNMENT = 'alignment';\n\n/**\n * The alignment command plugin.\n */\nexport default class AlignmentCommand extends Command {\n\t/**\n\t * A value of the current block's alignment.\n\t *\n\t * @observable\n\t * @readonly\n\t */\n\tdeclare public value: SupportedOption;\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic override refresh(): void {\n\t\tconst editor = this.editor;\n\t\tconst locale = editor.locale;\n\t\tconst firstBlock = first( this.editor.model.document.selection.getSelectedBlocks() )!;\n\n\t\t// As first check whether to enable or disable the command as the value will always be false if the command cannot be enabled.\n\t\tthis.isEnabled = Boolean( firstBlock ) && this._canBeAligned( firstBlock );\n\n\t\tif ( this.isEnabled && firstBlock.hasAttribute( 'alignment' ) ) {\n\t\t\tthis.value = firstBlock.getAttribute( 'alignment' ) as SupportedOption;\n\t\t} else {\n\t\t\tthis.value = locale.contentLanguageDirection === 'rtl' ? 'right' : 'left';\n\t\t}\n\t}\n\n\t/**\n\t * Executes the command. Applies the alignment `value` to the selected blocks.\n\t * If no `value` is passed, the `value` is the default one or it is equal to the currently selected block's alignment attribute,\n\t * the command will remove the attribute from the selected blocks.\n\t *\n\t * @param options Options for the executed command.\n\t * @param options.value The value to apply.\n\t * @fires execute\n\t */\n\tpublic override execute( options: { value?: SupportedOption } = {} ): void {\n\t\tconst editor = this.editor;\n\t\tconst locale = editor.locale;\n\t\tconst model = editor.model;\n\t\tconst doc = model.document;\n\n\t\tconst value = options.value!;\n\n\t\tmodel.change( writer => {\n\t\t\t// Get only those blocks from selected that can have alignment set\n\t\t\tconst blocks = Array.from( doc.selection.getSelectedBlocks() ).filter( block => this._canBeAligned( block ) );\n\t\t\tconst currentAlignment = blocks[ 0 ].getAttribute( 'alignment' );\n\n\t\t\t// Remove alignment attribute if current alignment is:\n\t\t\t// - default (should not be stored in model as it will bloat model data)\n\t\t\t// - equal to currently set\n\t\t\t// - or no value is passed - denotes default alignment.\n\t\t\tconst removeAlignment = isDefault( value, locale ) || currentAlignment === value || !value;\n\n\t\t\tif ( removeAlignment ) {\n\t\t\t\tremoveAlignmentFromSelection( blocks, writer );\n\t\t\t} else {\n\t\t\t\tsetAlignmentOnSelection( blocks, writer, value );\n\t\t\t}\n\t\t} );\n\t}\n\n\t/**\n\t * Checks whether a block can have alignment set.\n\t *\n\t * @param block The block to be checked.\n\t */\n\tprivate _canBeAligned( block: Element ) {\n\t\treturn this.editor.model.schema.checkAttribute( block, ALIGNMENT );\n\t}\n}\n\n/**\n * Removes the alignment attribute from blocks.\n */\nfunction removeAlignmentFromSelection( blocks: Array<Element>, writer: Writer ) {\n\tfor ( const block of blocks ) {\n\t\twriter.removeAttribute( ALIGNMENT, block );\n\t}\n}\n\n/**\n * Sets the alignment attribute on blocks.\n */\nfunction setAlignmentOnSelection( blocks: Array<Element>, writer: Writer, alignment: string ) {\n\tfor ( const block of blocks ) {\n\t\twriter.setAttribute( ALIGNMENT, alignment, block );\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module alignment/alignmentediting\n */\n\nimport { Plugin, type Editor } from 'ckeditor5/src/core.js';\nimport type { AttributeDescriptor } from 'ckeditor5/src/engine.js';\n\nimport AlignmentCommand from './alignmentcommand.js';\nimport { isDefault, isSupported, normalizeAlignmentOptions, supportedOptions } from './utils.js';\nimport type { AlignmentFormat, SupportedOption } from './alignmentconfig.js';\n\n/**\n * The alignment editing feature. It introduces the {@link module:alignment/alignmentcommand~AlignmentCommand command} and adds\n * the `alignment` attribute for block elements in the {@link module:engine/model/model~Model model}.\n */\nexport default class AlignmentEditing extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static get pluginName() {\n\t\treturn 'AlignmentEditing' as const;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static override get isOfficialPlugin(): true {\n\t\treturn true;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tconstructor( editor: Editor ) {\n\t\tsuper( editor );\n\n\t\teditor.config.define( 'alignment', {\n\t\t\toptions: supportedOptions.map( option => ( { name: option } ) )\n\t\t} );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic init(): void {\n\t\tconst editor = this.editor;\n\t\tconst locale = editor.locale;\n\t\tconst schema = editor.model.schema;\n\n\t\tconst options: Array<AlignmentFormat> = normalizeAlignmentOptions( editor.config.get( 'alignment.options' )! );\n\n\t\t// Filter out unsupported options and those that are redundant, e.g. `left` in LTR / `right` in RTL mode.\n\t\tconst optionsToConvert = options.filter(\n\t\t\toption => isSupported( option.name ) && !isDefault( option.name, locale )\n\t\t);\n\n\t\t// Once there is at least one `className` defined, we switch to alignment with classes.\n\t\tconst shouldUseClasses = optionsToConvert.some( option => !!option.className );\n\n\t\t// Allow alignment attribute on all blocks.\n\t\tschema.extend( '$block', { allowAttributes: 'alignment' } );\n\t\teditor.model.schema.setAttributeProperties( 'alignment', { isFormatting: true } );\n\n\t\tif ( shouldUseClasses ) {\n\t\t\teditor.conversion.attributeToAttribute( buildClassDefinition( optionsToConvert ) );\n\t\t} else {\n\t\t\t// Downcast inline styles.\n\t\t\teditor.conversion.for( 'downcast' ).attributeToAttribute( buildDowncastInlineDefinition( optionsToConvert ) );\n\t\t}\n\n\t\tconst upcastInlineDefinitions = buildUpcastInlineDefinitions( optionsToConvert );\n\n\t\t// Always upcast from inline styles.\n\t\tfor ( const definition of upcastInlineDefinitions ) {\n\t\t\teditor.conversion.for( 'upcast' ).attributeToAttribute( definition );\n\t\t}\n\n\t\tconst upcastCompatibilityDefinitions = buildUpcastCompatibilityDefinitions( optionsToConvert );\n\n\t\t// Always upcast from deprecated `align` attribute.\n\t\tfor ( const definition of upcastCompatibilityDefinitions ) {\n\t\t\teditor.conversion.for( 'upcast' ).attributeToAttribute( definition );\n\t\t}\n\n\t\teditor.commands.add( 'alignment', new AlignmentCommand( editor ) );\n\t}\n}\n\n/**\n * Prepare downcast conversion definition for inline alignment styling.\n */\nfunction buildDowncastInlineDefinition( options: Array<AlignmentFormat> ) {\n\tconst view: Record<string, { key: 'style'; value: { 'text-align': SupportedOption } }> = {};\n\n\tfor ( const { name } of options ) {\n\t\tview[ name ] = {\n\t\t\tkey: 'style',\n\t\t\tvalue: {\n\t\t\t\t'text-align': name\n\t\t\t}\n\t\t};\n\t}\n\n\tconst definition = {\n\t\tmodel: {\n\t\t\tkey: 'alignment',\n\t\t\tvalues: options.map( option => option.name )\n\t\t},\n\t\tview\n\t};\n\n\treturn definition;\n}\n\n/**\n * Prepare upcast definitions for inline alignment styles.\n */\nfunction buildUpcastInlineDefinitions( options: Array<AlignmentFormat> ) {\n\tconst definitions = [];\n\n\tfor ( const { name } of options ) {\n\t\tdefinitions.push( {\n\t\t\tview: {\n\t\t\t\tkey: 'style',\n\t\t\t\tvalue: {\n\t\t\t\t\t'text-align': name\n\t\t\t\t}\n\t\t\t},\n\t\t\tmodel: {\n\t\t\t\tkey: 'alignment',\n\t\t\t\tvalue: name\n\t\t\t}\n\t\t} );\n\t}\n\n\treturn definitions;\n}\n\n/**\n * Prepare upcast definitions for deprecated `align` attribute.\n */\nfunction buildUpcastCompatibilityDefinitions( options: Array<AlignmentFormat> ) {\n\tconst definitions = [];\n\n\tfor ( const { name } of options ) {\n\t\tdefinitions.push( {\n\t\t\tview: {\n\t\t\t\tkey: 'align',\n\t\t\t\tvalue: name\n\t\t\t},\n\t\t\tmodel: {\n\t\t\t\tkey: 'alignment',\n\t\t\t\tvalue: name\n\t\t\t}\n\t\t} );\n\t}\n\n\treturn definitions;\n}\n\n/**\n * Prepare conversion definitions for upcast and downcast alignment with classes.\n */\nfunction buildClassDefinition( options: Array<AlignmentFormat> ) {\n\tconst view: Record<string, AttributeDescriptor> = {};\n\n\tfor ( const option of options ) {\n\t\tview[ option.name ] = {\n\t\t\tkey: 'class',\n\t\t\tvalue: option.className!\n\t\t};\n\t}\n\n\tconst definition = {\n\t\tmodel: {\n\t\t\tkey: 'alignment',\n\t\t\tvalues: options.map( option => option.name )\n\t\t},\n\t\tview\n\t};\n\n\treturn definition;\n}\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module alignment/alignmentui\n */\n\nimport { Plugin } from 'ckeditor5/src/core.js';\nimport {\n\ttype Button,\n\tButtonView,\n\tcreateDropdown,\n\taddToolbarToDropdown,\n\tMenuBarMenuListItemView,\n\tMenuBarMenuListItemButtonView,\n\tMenuBarMenuView,\n\tMenuBarMenuListView\n} from 'ckeditor5/src/ui.js';\nimport { IconAlignCenter, IconAlignJustify, IconAlignLeft, IconAlignRight } from 'ckeditor5/src/icons.js';\nimport type { Locale } from 'ckeditor5/src/utils.js';\n\nimport { isSupported, normalizeAlignmentOptions } from './utils.js';\nimport type { AlignmentFormat, SupportedOption } from './alignmentconfig.js';\nimport type AlignmentCommand from './alignmentcommand.js';\n\nconst iconsMap = /* #__PURE__ */ ( () => new Map( [\n\t[ 'left', IconAlignLeft ],\n\t[ 'right', IconAlignRight ],\n\t[ 'center', IconAlignCenter ],\n\t[ 'justify', IconAlignJustify ]\n] ) )();\n\n/**\n * The default alignment UI plugin.\n *\n * It introduces the `'alignment:left'`, `'alignment:right'`, `'alignment:center'` and `'alignment:justify'` buttons\n * and the `'alignment'` dropdown.\n */\nexport default class AlignmentUI extends Plugin {\n\t/**\n\t * Returns the localized option titles provided by the plugin.\n\t *\n\t * The following localized titles corresponding with\n\t * {@link module:alignment/alignmentconfig~AlignmentConfig#options} are available:\n\t *\n\t * * `'left'`,\n\t * * `'right'`,\n\t * * `'center'`,\n\t * * `'justify'`.\n\t *\n\t * @readonly\n\t */\n\tpublic get localizedOptionTitles(): Record<SupportedOption, string> {\n\t\tconst t = this.editor.t;\n\n\t\treturn {\n\t\t\t'left': t( 'Align left' ),\n\t\t\t'right': t( 'Align right' ),\n\t\t\t'center': t( 'Align center' ),\n\t\t\t'justify': t( 'Justify' )\n\t\t};\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static get pluginName() {\n\t\treturn 'AlignmentUI' as const;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static override get isOfficialPlugin(): true {\n\t\treturn true;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic init(): void {\n\t\tconst editor = this.editor;\n\t\tconst options = normalizeAlignmentOptions( editor.config.get( 'alignment.options' )! );\n\n\t\toptions\n\t\t\t.map( option => option.name )\n\t\t\t.filter( isSupported )\n\t\t\t.forEach( option => this._addButton( option ) );\n\n\t\tthis._addToolbarDropdown( options );\n\t\tthis._addMenuBarMenu( options );\n\t}\n\n\t/**\n\t * Helper method for initializing the button and linking it with an appropriate command.\n\t *\n\t * @param option The name of the alignment option for which the button is added.\n\t */\n\tprivate _addButton( option: SupportedOption ): void {\n\t\tconst editor = this.editor;\n\n\t\teditor.ui.componentFactory.add( `alignment:${ option }`, locale => this._createButton( locale, option ) );\n\t}\n\n\t/**\n\t * Helper method for creating the button view element.\n\t *\n\t * @param locale Editor locale.\n\t * @param option The name of the alignment option for which the button is added.\n\t * @param buttonAttrs Optional parameters passed to button view instance.\n\t */\n\tprivate _createButton(\n\t\tlocale: Locale,\n\t\toption: SupportedOption,\n\t\tbuttonAttrs: Partial<Button> = {}\n\t): ButtonView {\n\t\tconst editor = this.editor;\n\t\tconst command: AlignmentCommand = editor.commands.get( 'alignment' )!;\n\t\tconst buttonView = new ButtonView( locale );\n\n\t\tbuttonView.set( {\n\t\t\tlabel: this.localizedOptionTitles[ option ],\n\t\t\ticon: iconsMap.get( option ),\n\t\t\ttooltip: true,\n\t\t\tisToggleable: true,\n\t\t\t...buttonAttrs\n\t\t} );\n\n\t\t// Bind button model to command.\n\t\tbuttonView.bind( 'isEnabled' ).to( command );\n\t\tbuttonView.bind( 'isOn' ).to( command, 'value', value => value === option );\n\n\t\t// Execute command.\n\t\tthis.listenTo( buttonView, 'execute', () => {\n\t\t\teditor.execute( 'alignment', { value: option } );\n\t\t\teditor.editing.view.focus();\n\t\t} );\n\n\t\treturn buttonView;\n\t}\n\n\t/**\n\t * Helper method for initializing the toolnar dropdown and linking it with an appropriate command.\n\t *\n\t * @param options The name of the alignment option for which the button is added.\n\t */\n\tprivate _addToolbarDropdown( options: Array<AlignmentFormat> ): void {\n\t\tconst editor = this.editor;\n\t\tconst factory = editor.ui.componentFactory;\n\n\t\tfactory.add( 'alignment', locale => {\n\t\t\tconst dropdownView = createDropdown( locale );\n\t\t\tconst tooltipPosition = locale.uiLanguageDirection === 'rtl' ? 'w' : 'e';\n\t\t\tconst t = locale.t;\n\n\t\t\t// Add existing alignment buttons to dropdown's toolbar.\n\t\t\taddToolbarToDropdown(\n\t\t\t\tdropdownView,\n\t\t\t\t() => options.map( option => this._createButton( locale, option.name, { tooltipPosition } ) ) as Array<ButtonView>,\n\t\t\t\t{\n\t\t\t\t\tenableActiveItemFocusOnDropdownOpen: true,\n\t\t\t\t\tisVertical: true,\n\t\t\t\t\tariaLabel: t( 'Text alignment toolbar' )\n\t\t\t\t}\n\t\t\t);\n\n\t\t\t// Configure dropdown properties an behavior.\n\t\t\tdropdownView.buttonView.set( {\n\t\t\t\tlabel: t( 'Text alignment' ),\n\t\t\t\ttooltip: true\n\t\t\t} );\n\n\t\t\tdropdownView.extendTemplate( {\n\t\t\t\tattributes: {\n\t\t\t\t\tclass: 'ck-alignment-dropdown'\n\t\t\t\t}\n\t\t\t} );\n\n\t\t\t// The default icon depends on the direction of the content.\n\t\t\tconst defaultIcon = locale.contentLanguageDirection === 'rtl' ? iconsMap.get( 'right' ) : iconsMap.get( 'left' );\n\t\t\tconst command: AlignmentCommand = editor.commands.get( 'alignment' )!;\n\n\t\t\t// Change icon to reflect current selection's alignment.\n\t\t\tdropdownView.buttonView.bind( 'icon' ).to( command, 'value', value => iconsMap.get( value ) || defaultIcon );\n\n\t\t\t// Enable button if any of the buttons is enabled.\n\t\t\tdropdownView.bind( 'isEnabled' ).to( command, 'isEnabled' );\n\n\t\t\t// Focus the editable after executing the command.\n\t\t\t// Overrides a default behaviour where the focus is moved to the dropdown button (#12125).\n\t\t\tthis.listenTo( dropdownView, 'execute', () => {\n\t\t\t\teditor.editing.view.focus();\n\t\t\t} );\n\n\t\t\treturn dropdownView;\n\t\t} );\n\t}\n\n\t/**\n\t * Creates a menu for all alignment options to use either in menu bar.\n\t *\n\t * @param options Normalized alignment options from config.\n\t */\n\tprivate _addMenuBarMenu( options: Array<AlignmentFormat> ): void {\n\t\tconst editor = this.editor;\n\n\t\teditor.ui.componentFactory.add( 'menuBar:alignment', locale => {\n\t\t\tconst command: AlignmentCommand = editor.commands.get( 'alignment' )!;\n\t\t\tconst t = locale.t;\n\t\t\tconst menuView = new MenuBarMenuView( locale );\n\t\t\tconst listView = new MenuBarMenuListView( locale );\n\n\t\t\tmenuView.bind( 'isEnabled' ).to( command );\n\n\t\t\tlistView.set( {\n\t\t\t\tariaLabel: t( 'Text alignment' ),\n\t\t\t\trole: 'menu'\n\t\t\t} );\n\n\t\t\tmenuView.buttonView.set( {\n\t\t\t\tlabel: t( 'Text alignment' )\n\t\t\t} );\n\n\t\t\tfor ( const option of options ) {\n\t\t\t\tconst listItemView = new MenuBarMenuListItemView( locale, menuView );\n\t\t\t\tconst buttonView = new MenuBarMenuListItemButtonView( locale );\n\n\t\t\t\tbuttonView.delegate( 'execute' ).to( menuView );\n\t\t\t\tbuttonView.set( {\n\t\t\t\t\tlabel: this.localizedOptionTitles[ option.name ],\n\t\t\t\t\ticon: iconsMap.get( option.name ),\n\t\t\t\t\trole: 'menuitemcheckbox',\n\t\t\t\t\tisToggleable: true\n\t\t\t\t} );\n\n\t\t\t\tbuttonView.on( 'execute', () => {\n\t\t\t\t\teditor.execute( 'alignment', { value: option.name } );\n\n\t\t\t\t\teditor.editing.view.focus();\n\t\t\t\t} );\n\n\t\t\t\tbuttonView.bind( 'isOn' ).to( command, 'value', value => value === option.name );\n\t\t\t\tbuttonView.bind( 'isEnabled' ).to( command, 'isEnabled' );\n\n\t\t\t\tlistItemView.children.add( buttonView );\n\t\t\t\tlistView.items.add( listItemView );\n\t\t\t}\n\n\t\t\tmenuView.panelView.children.add( listView );\n\n\t\t\treturn menuView;\n\t\t} );\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module alignment/alignment\n */\n\nimport { Plugin } from 'ckeditor5/src/core.js';\n\nimport AlignmentEditing from './alignmentediting.js';\nimport AlignmentUI from './alignmentui.js';\n\n/**\n * The text alignment plugin.\n *\n * For a detailed overview, check the {@glink features/text-alignment Text alignment} feature guide\n * and the {@glink api/alignment package page}.\n *\n * This is a \"glue\" plugin which loads the {@link module:alignment/alignmentediting~AlignmentEditing} and\n * {@link module:alignment/alignmentui~AlignmentUI} plugins.\n */\nexport default class Alignment extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static get requires() {\n\t\treturn [ AlignmentEditing, AlignmentUI ] as const;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static get pluginName() {\n\t\treturn 'Alignment' as const;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static override get isOfficialPlugin(): true {\n\t\treturn true;\n\t}\n}\n"]}